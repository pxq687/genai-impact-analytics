
import { useState } from "react";
import { DashboardLayout } from "@/components/layout/DashboardLayout";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell, PieChart, Pie, LineChart, Line } from "recharts";
import { toolUsageData, aiToolsList, timeSeriesData } from "@/lib/data";
import { ToolFilter } from "@/components/dashboard/ToolFilter";

const CostTracking = () => {
  const [selectedTools, setSelectedTools] = useState<string[]>(
    aiToolsList.slice(0, 5).map(tool => tool.id)
  );
  
  // Filter data based on selected tools
  const filteredData = selectedTools.length > 0 
    ? toolUsageData.filter(tool => selectedTools.includes(tool.id))
    : toolUsageData;
  
  // Get total costs and savings
  const totalCost = filteredData.reduce((sum, tool) => sum + tool.costPerMonth, 0);
  const totalSavings = filteredData.reduce((sum, tool) => sum + tool.savingsPerMonth, 0);
  
  // Data for cost per tool chart
  const costData = filteredData.map(tool => ({
    name: tool.name,
    cost: tool.costPerMonth,
    savings: tool.savingsPerMonth,
    category: tool.category
  }));
  
  // Cost data by category
  const costByCategory: Record<string, number> = {};
  const savingsByCategory: Record<string, number> = {};
  
  filteredData.forEach(tool => {
    costByCategory[tool.category] = (costByCategory[tool.category] || 0) + tool.costPerMonth;
    savingsByCategory[tool.category] = (savingsByCategory[tool.category] || 0) + tool.savingsPerMonth;
  });
  
  const categoryData = Object.entries(costByCategory).map(([name, value]) => ({
    name,
    cost: value,
    savings: savingsByCategory[name],
    roi: ((savingsByCategory[name] / value) * 100).toFixed(0)
  }));
  
  // Colors for different tool categories
  const categoryColors = {
    "Text Generation": "#8884d8",
    "Image Generation": "#82ca9d",
    "Code Generation": "#ffc658",
    "Content Creation": "#ff8042"
  };
  
  // Format currency
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(value);
  };
  
  return (
    <DashboardLayout 
      title="Cost Tracking" 
      subtitle="Monitor and analyze your AI implementation costs"
    >
      <div className="space-y-6">
        {/* Tool Filter */}
        <div className="mb-6">
          <ToolFilter 
            selectedTools={selectedTools} 
            onToolsChange={setSelectedTools} 
          />
        </div>
        
        {/* Cost Overview Cards */}
        <div className="grid gap-4 md:grid-cols-3">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-base font-medium">Total Monthly Cost</CardTitle>
              <CardDescription>Current spend on AI tools</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{formatCurrency(totalCost)}</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-base font-medium">Total Monthly Savings</CardTitle>
              <CardDescription>Value generated by AI tools</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-emerald-600">{formatCurrency(totalSavings)}</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-base font-medium">Overall ROI</CardTitle>
              <CardDescription>Return on AI investment</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-600">
                {totalCost > 0 ? `${((totalSavings / totalCost) * 100).toFixed(0)}%` : 'N/A'}
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Cost Charts */}
        <div className="grid gap-6 md:grid-cols-2">
          <Card>
            <CardHeader>
              <CardTitle>Cost vs. Savings by Tool</CardTitle>
              <CardDescription>
                Monthly cost and savings for each AI tool
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                {filteredData.length > 0 ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={costData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" opacity={0.2} />
                      <XAxis dataKey="name" />
                      <YAxis tickFormatter={(value) => formatCurrency(value)} />
                      <Tooltip formatter={(value) => [formatCurrency(Number(value)), '']} />
                      <Legend />
                      <Bar dataKey="cost" name="Monthly Cost" fill="#ff8042" />
                      <Bar dataKey="savings" name="Monthly Savings" fill="#82ca9d" />
                    </BarChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="flex items-center justify-center h-full text-muted-foreground">
                    Select at least one tool to view cost breakdown
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>ROI by Tool</CardTitle>
              <CardDescription>
                Return on investment for each AI tool
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                {filteredData.length > 0 ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={filteredData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" opacity={0.2} />
                      <XAxis dataKey="name" />
                      <YAxis />
                      <Tooltip formatter={(value) => [`${value}%`, 'ROI']} />
                      <Legend />
                      <Bar dataKey="roi" name="ROI (%)" fill="#8884d8">
                        {filteredData.map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={categoryColors[entry.category as keyof typeof categoryColors]} 
                          />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="flex items-center justify-center h-full text-muted-foreground">
                    Select at least one tool to view ROI breakdown
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Cost by Category and Trend */}
        <div className="grid gap-6 md:grid-cols-2">
          <Card>
            <CardHeader>
              <CardTitle>Cost by Category</CardTitle>
              <CardDescription>
                Distribution of costs across AI tool categories
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                {Object.keys(costByCategory).length > 0 ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={categoryData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" opacity={0.2} />
                      <XAxis dataKey="name" />
                      <YAxis tickFormatter={(value) => formatCurrency(value)} />
                      <Tooltip formatter={(value, name) => {
                        if (name === 'cost' || name === 'savings') 
                          return [formatCurrency(Number(value)), name === 'cost' ? 'Cost' : 'Savings'];
                        return [value, name];
                      }} />
                      <Legend />
                      <Bar dataKey="cost" name="Cost" fill="#ff8042" />
                      <Bar dataKey="savings" name="Savings" fill="#82ca9d" />
                    </BarChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="flex items-center justify-center h-full text-muted-foreground">
                    Select at least one tool to view category breakdown
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Cost vs. Savings Trend</CardTitle>
              <CardDescription>
                Monthly comparison of costs and savings
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={timeSeriesData}
                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" opacity={0.2} />
                    <XAxis dataKey="name" />
                    <YAxis tickFormatter={(value) => formatCurrency(value)} />
                    <Tooltip formatter={(value) => [formatCurrency(Number(value)), '']} />
                    <Legend />
                    <Line 
                      type="monotone" 
                      dataKey="costs" 
                      name="Costs" 
                      stroke="#ff8042" 
                      strokeWidth={2}
                      activeDot={{ r: 8 }} 
                    />
                    <Line 
                      type="monotone" 
                      dataKey="savings" 
                      name="Savings" 
                      stroke="#82ca9d" 
                      strokeWidth={2} 
                      activeDot={{ r: 8 }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </DashboardLayout>
  );
};

export default CostTracking;
